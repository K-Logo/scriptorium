// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  email           String    @unique                           // we can validate in frontend
  phoneNumber     String    @unique                           // we can validate in frontend
  role            String    @default("USER")                  // avail enums: "USER", "ADMIN"
  createdAt       DateTime  @default(now())                   // maybe make this optional
  comments        Comment[] @relation("UserComments")
  blogPosts       Blog[]    @relation("UserBlogPosts")
}

model Blog {
  id              Int       @id @default(autoincrement())
  title           String 
  description     String
  tag             String
  code_template   String
  author          User      @relation("UserBlogPosts", fields: [authorId], references: [id])
  authorId        Int       // Foreign key field for the author
  rating          Int       @default(0)
  reports         Int       @default(0)
  comments        Comment[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  author      User      @relation("UserComments", fields: [authorId], references: [id])
  authorId    Int       // Foreign key field for the author
  blogPost    Blog      @relation(fields: [blogPostId], references: [id])
  blogPostId  Int       // Foreign key field for the blog post
  parentId    Int?      // Optional field to handle replies
  replies     Comment[] @relation("CommentReplies") // Comments replying to this one
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id]) // Parent comment
}