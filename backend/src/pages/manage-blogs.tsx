import React, { useState, useContext, useEffect } from "react";
import Head from "next/head";
import { useRouter } from 'next/router';
import Navbar from "../components/Navbar";
import Link from 'next/link';

export default function BlogPosts() {
    const [blogs, setBlogs] = useState([]);
    const [user, setUser] = useState(null);
    const router = useRouter();
    const [currentPage, setCurrentPage] = useState(1);

    // async function getAllBlogs() {
    //     const blogs = await fetch(`/api/blog/sortBlogs?sortType=${sortType}`, {
    //         method:"GET",
    //         headers: {
    //             "Content-Type": "application/json",
    //         },
    //     });
    //     return blogs;
    // }

    useEffect(() => {
        handleSubmit();
    }, [currentPage]);

    // Function generated by ChatGPT
    const goBack = () => {
        if (currentPage > 1) {
        setCurrentPage(currentPage - 1);
        }
    };

    // Function generated by ChatGPT
    const goNext = () => {
        setCurrentPage(currentPage + 1);
    };
    
    const typeToDisplayName = {
        "title": "Title",
        "content": "Content",
        "tag": "Tag"
    };

    const sortToDisplayName = {
        "asc": "Ascending Ratings",
        "desc": "Descending Ratings",
    }

    async function handleSubmit() {
        const userJson = window.localStorage.getItem('user');
        const user = JSON.parse(userJson);
        if (!user || !user.jwtToken) {
            router.push("/login");
        } else {
            setUser(user);
            const params: string = `?epp=20&pno=${currentPage}&type=code-templates`;
            const response = await fetch(`/api/blogs${params}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            const json = await response.json();
            if (response.ok) {
                setBlogs(json);
            } else {
                alert(json.error);
            }
        }
    }
    
    return (
        <>
            <Head>
                <title>Scriptorium Blogs</title>
            </Head>
            <main>
                <div id="code-templates-container">
                    <div id="middle-column">
                        <h1>Blogs</h1>
                        <br />
                        <div className="code-templates-results">
                            <div
                                className="space-y-4 px-2 max-w-prose mx-auto"
                                >
                                {blogs.map((blog) => (
                                    <Link
                                    key={blog.id}
                                    className="block p-4 border rounded-lg shadow hover:bg-gray-100 transition duration-200"
                                    href={`/blogs/${blog.id}`}
                                    >
                                    <h3 className="text-xl font-semibold">{blog.title}</h3>
                                    <p className="text-blue-700 mt-2">{blog.description}</p>
                                    <p>{blog.author.username}</p>
                                    {blog.tags.map((tag) =>
                                        <div className="tag">{tag.name}</div>
                                    )}
                                    <p>{blog.rating}</p>
                                    </Link>
                                ))}
                            </div>
                        </div>
                        <div className="mt-6 text-center absolute right-[7vw] top-[20vw]">
                            {<Link href='/blogs/create'>
                                    <button className="blue-button">
                                        Write Blog
                                    </button>
                                </Link>
                            }
                        </div>
                    </div>
                    <div className="pagination-controls"> {/* div generated by ChatGPT */}
                        <button className="blue-button" onClick={goBack} disabled={currentPage === 1}>
                            {"< "}Back
                        </button>
                        <span>Page {currentPage}</span>
                        <button className="blue-button" onClick={goNext}>
                            Next{" >"}
                        </button>
                        </div>
                </div>
            </main>
        </>
    )
}