import React, { useState, useEffect } from "react";
import Head from "next/head";
import { useRouter } from 'next/router';
import Navbar from "../../components/Navbar";
import Link from 'next/link';

export default function CodeTemplates() {
  const [searchTerm, setSearchTerm] = useState("");
  const [searchType, setSearchType] = useState("title");

  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [codeTemplates, setCodeTemplates] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const typeToDisplayName = {
      "title": "Title",
      "content": "Content",
      "tag": "Tag"
  };

  useEffect(() => {
    handleSubmit();
  }, [currentPage]) ;

  function toggleDropdown() {
      setDropdownOpen(!dropdownOpen);
  }

  function Dropdown() {
      return dropdownOpen && (
          <ul className="code-search-type-dropdown">
              <button onClick={() => {setSearchType("title"); toggleDropdown();}}><li>Title</li></button>
              <button onClick={() => {setSearchType("content"); toggleDropdown();}}><li>Content</li></button>
              <button onClick={() => {setSearchType("tag"); toggleDropdown();}}><li>Tag</li></button>
          </ul>
      )
      
  }

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  }

  // Function generated by ChatGPT
  const goBack = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Function generated by ChatGPT
  const goNext = () => {
    setCurrentPage(currentPage + 1);
  };

  async function handleSubmit() {
    let params: string = "";
    if (searchType === "title") {
      params = `?title=${searchTerm}`;
    } else if (searchType === "content") {
      params = `?content=${searchTerm}`;
    } else if (searchType === "tag") {
      params = `?tag=${searchTerm}`;
    }
    params = params + `&epp=20&pno=${currentPage}`;

    const response = await fetch(`http://localhost:3000/api/codetemplates${params}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        }
    });
    const json = await response.json();
    console.log(json);
    if (response.ok) {
        setCodeTemplates(json.codeTemplate);
    } else {
        alert(json.error);
    }
  }


  return (
    <>
      <Head>
        <title>Scriptorium Code Templates</title>
      </Head>
      <main>
        <div id="code-templates-container">
          <div id="middle-column">
            <h1>
                Code templates
            </h1>
            <br/>
            <div className="search-bar">
              <div className="dropdown-container">
                <button className="code-search-type-dropdown-button" onClick={() => toggleDropdown()}>{typeToDisplayName[searchType]}</button>
                <Dropdown/>
              </div>
              <input
                type="text"
                id="search-text"
                placeholder="Search..."
                value={searchTerm}
                onChange={handleSearchChange}
              />
              <button className="search-button" onClick={handleSubmit}>
                Search
              </button>
            </div>
            <div id="code-templates-results">
              <div id="code-templates-grid">
                {codeTemplates.map((item) => (
                  <Link key={item.id} className="code-template-item" href={`/code-templates/${item.id}`}>
                    <h3>{item.title}</h3>
                    <p>{item.explanation}</p>
                    <div className="tag-container">
                      {item.tags.map((tag: any) => (
                        <div className="tag">{tag.name}</div>
                      ))}
                    </div>
                    
                  </Link>
                ))}
              </div>
            </div>
            <div className="pagination-controls"> {/* div generated by ChatGPT */}
              <button className="blue-button" onClick={goBack} disabled={currentPage === 1}>
                {"< "}Back
              </button>
              <span>Page {currentPage}</span>
              <button className="blue-button" onClick={goNext}>
                Next{" >"}
              </button>
            </div>
          </div>
          
        </div>
      </main>
    </>
  );
}

